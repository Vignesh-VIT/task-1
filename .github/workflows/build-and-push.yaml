name: Build and Push the flask app("Hello World") to Jfrog Artifactory
on:
  push:
    branches:
      - main
      - feature/*
jobs:
  build-and-push:
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to JFrog Artifactory
      uses: docker/login-action@v3
      with:
        registry: vigneshtrail.jfrog.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build Docker image
      run: docker build -t vigneshtrail.jfrog.io/vignesh-docker/flask-app:actions .
      
    - name: Push Docker image
      run: docker push vigneshtrail.jfrog.io/vignesh-docker/flask-app:actions
    
    - name: Send Teams notification
      if: always()
      uses: aliencube/microsoft-teams-actions@v0.8.0
      with:
        webhook_uri: ${{ secrets.TEAMS_WEBHOOK }}
        title: "Build ${{ job.status }}"
        summary: "Build ${{ github.workflow }} ${{ job.status }}"
        text: "Repository: ${{ github.repository }}\nBranch: ${{ github.ref }}\nStatus: ${{ job.status }}"
        theme_color: ${{ job.status == 'success' && '00FF00' || 'FF0000' }}

    - name: Send Outlook Email
      if: always()
      run: |
          # Get token
          TOKEN_RESPONSE=$(curl -s -X POST "https://login.microsoftonline.com/${{ secrets.AZURE_TENANT_ID }}/oauth2/v2.0/token" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
          -d "scope=https://graph.microsoft.com/.default" \
          -d "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
          -d "grant_type=client_credentials")
          
          ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.access_token')
          
          # Set status emoji
          if [ "${{ job.status }}" = "success" ]; then
            STATUS_EMOJI="✅"
          else
            STATUS_EMOJI="❌"
          fi
          
          # Create email JSON file
          cat > email_payload.json << EOF
          {
            "message": {
              "subject": "Build ${{ job.status }} $STATUS_EMOJI - ${{ github.repository }}",
              "body": {
                "contentType": "HTML",
                "content": "<h2>GitHub Actions Build Notification</h2><p><strong>Status:</strong> ${{ job.status }}</p><p><strong>Repository:</strong> ${{ github.repository }}</p><p><strong>Branch:</strong> ${{ github.ref_name }}</p><p><strong>Workflow:</strong> ${{ github.workflow }}</p><p><a href=\"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\">View Build Logs</a></p>"
              },
              "toRecipients": [
                {
                  "emailAddress": {
                    "address": "${{ secrets.EMAIL_RECIPIENT }}"
                  }
                }
              ]
            }
          }
          EOF
          
          # Send email with proper content type header
          curl -v -X POST "https://graph.microsoft.com/v1.0/users/${{ secrets.SENDER_EMAIL }}/sendMail" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d @email_payload.json
